package com.ctrip.soa.caravan.protobuf.v2.customization.enums;

import com.ctrip.soa.caravan.protobuf.v2.ProtobufConfig;
import com.ctrip.soa.caravan.protobuf.v2.customization.CustomProtobufParser;
import com.ctrip.soa.caravan.protobuf.v2.customization.ProtobufParserUtil;
import com.ctrip.soa.caravan.protobuf.v2.customization.TypeCustomizationFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;
import com.fasterxml.jackson.dataformat.protobuf.ProtobufGenerator;
import com.fasterxml.jackson.dataformat.protobuf.protoparser.protoparser.DataType;
import com.fasterxml.jackson.dataformat.protobuf.protoparser.protoparser.DataType.ScalarType;
import com.fasterxml.jackson.dataformat.protobuf.protoparser.protoparser.MessageElement.Builder;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * Created by marsqing on 22/03/2017.
 */
@SuppressWarnings({"serial", "rawtypes"})
public class EnumCustomizationFactory implements TypeCustomizationFactory {

  public final static DataType DATA_TYPE = ScalarType.INT32;

  private ProtobufConfig protobufConfig;

  private ConcurrentMap<Class<?>, Method> getValueMethodCache = new ConcurrentHashMap<>();

  private ConcurrentMap<Class<?>, Method> findByValueMethodCache = new ConcurrentHashMap<>();

  public EnumCustomizationFactory(ProtobufConfig protobufConfig) {
    this.protobufConfig = protobufConfig;
  }

  @Override
  public Class<?>[] getTargetClasses() {
    return new Class<?>[]{
        // Enum.class is specially processed by SimpleSerializers.findSerializer().
        // EnumCustomizationFactory will handle all Enum types.
        Enum.class
    };
  }

  @Override
  public DataType getTargetProtobufDataType() {
    return DATA_TYPE;
  }

  @Override
  public Builder getMessageElementBuilder() {
    return null;
  }

  @Override
  public JsonSerializer createSerializer() {
    return new StdScalarSerializer<Enum>(Enum.class) {
      @Override
      public void serialize(Enum value, JsonGenerator gen, SerializerProvider provider) throws IOException {
        ProtobufGenerator pgen = (ProtobufGenerator) gen;

        switch (protobufConfig.getEnumMode()) {
          case ByOrdinal:
            // plus 1 to match .net
            pgen.writeNumber(value.ordinal() + 1);
            break;
          case ByValue:
            pgen.writeNumber(fetchValueOfEnum(value));
            break;
        }
      }
    };
  }

  @Override
  @SuppressWarnings("unchecked")
  public JsonDeserializer createDeserializer() {
    return new StdDeserializer<Enum>(Enum.class) {
      @Override
      public Enum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        CustomProtobufParser pp = (CustomProtobufParser) p;

        Class<Enum> enumType = ProtobufParserUtil.getEnumClassOfCurrentField(pp.getCurrentMessage(), pp.getCurrentField());

        switch (protobufConfig.getEnumMode()) {
          case ByOrdinal:
            // minus 1 to match .net
            int ordinal = p.getIntValue() - 1;
            return enumType.getEnumConstants()[ordinal];
          case ByValue:
            return createEnumFromValue(enumType, p.getIntValue());
        }

        throw new RuntimeException("unknown enum mode " + protobufConfig.getEnumMode());
      }
    };
  }

  private int fetchValueOfEnum(Enum value) {
    Class<?> clazz = value.getClass();
    Method getValue = getValueMethodCache.get(clazz);

    if (getValue == null) {
      try {
        getValue = clazz.getDeclaredMethod("getValue");
      } catch (NoSuchMethodException e) {
        throw new RuntimeException(String.format("getValue() method not found in enum %s, probably not generated by SOA", clazz));
      }
      getValueMethodCache.putIfAbsent(clazz, getValue);
    }

    try {
      return (int) getValue.invoke(value);
    } catch (Exception e) {
      throw new RuntimeException(String.format("Error calling %s.getValue() on enum %s, probably not generated by SOA", value, clazz));
    }
  }

  private Enum createEnumFromValue(Class<Enum> clazz, int value) {
    Method findByValue = findByValueMethodCache.get(clazz);

    if (findByValue == null) {
      try {
        findByValue = clazz.getDeclaredMethod("findByValue", int.class);
      } catch (NoSuchMethodException e) {
        throw new RuntimeException(String.format("findByValue() method not found in enum %s, probably not generated by SOA", clazz));
      }
      findByValueMethodCache.putIfAbsent(clazz, findByValue);
    }

    try {
      return (Enum) findByValue.invoke(null, value);
    } catch (Exception e) {
      throw new RuntimeException(String.format("Error calling findByValue(%s) on enum %s, probably not generated by SOA", value, clazz));
    }
  }
}
